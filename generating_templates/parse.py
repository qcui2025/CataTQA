""" Parse the template issues generated by LLM """
import re
import os

from CataTQA.utils.jsonlines_io import IOJsonLines

q_type_desc = {
    'Cell_Query':'In a tabular data structure, locate the cells that meet the requirements.',
    'Data_Filtering':'Select cells that meet specific conditions from all the data in the table.',
    'Fact_Judgmen':'In a tabular data structure, judge the data contained in the cells.',
    'Numerical_Calculation':'Obtain the correct answer through the calculation of table data.'
}

def parse(response, question_type, question_description, table_name):
    pattern = r"""```.*?(\[.*?\])\s*```"""
    datas = eval(re.findall(pattern, response.replace('\n', ''))[0])
    for data in datas:
        data['question_type'] = question_type
        data['question description'] = question_description
        data['answer'] = ''
        data['refer dataset'] = table_name
    return datas

if __name__ == '__main__':
    file_path = './output/'
    files = os.listdir(file_path)
    q_type = ['Cell_Query', 'Fact_Judgmen', 'Data_Filtering', 'Numerical_Calculation']

    for i in range(1,69):
        out = f'table{i}-templates.jsonl'
        for j in q_type:
            # print(j)
            file = os.path.join(file_path, f'table{i}-{j}.txt')
            with open(file, 'r', encoding='utf-8') as f:
                response = f.read()
            question_type = j

            for k in list(q_type_desc.keys()):
                if k == j:
                    question_description = q_type_desc[k]
            table_name = f'table{i}'
            datas = parse(response, question_type, question_description, table_name)
            IOJsonLines.write_out(f'templates/{out}', datas)
